{
    "docs": [
        {
            "location": "/",
            "text": "EAGOBranchBound\n\n\nEAGOBranchBound contains a flexible branch and bound library. This package allows the user to specify termination criteria, lower & upper bounding problems, as well as search criteria.\n\n\n\n\nIntroduction\n\n\nMore text\n\n\n#\n\n\nEAGOBranchBound.BnBModel\n \u2014 \nType\n.\n\n\nBnBModel\n\n\n\n\nStores attributes of stack used to solve BnB problem. Has the following fields:\n\n\n\n\nInit_Box::Vector{Interval{Float64}}        # stores initial interval box used\n\n\nbox::Vector{Vector{Interval{Float64}}}     # interval box storage stack\n\n\nInit_Integer::Vector{Vector{Int64}}        # initial integer range\n\n\nintegers::Vector{Vector{Vector{Int64}}}    # integer range storage stack\n\n\nLBD::Vector{Float64}                       # lower bounds associated with each stack item\n\n\nUBD::Vector{Float64}                       # Upper bounds associated with each stack item\n\n\nid::Vector{Int64}                          # Node ID for each stack item\n\n\npos::Vector{Int64}                         # Position in BnB Tree for each stack item\n\n\nLBDg::Float64                              # Global Lower Bound\n\n\nUBDg::Float64                              # Global Upper Bound\n\n\nLBDg_hist::Vector{Float64}                 # Value history LBD problem\n\n\nUBDg_hist::Vector{Float64}                 # Value history UBD problem\n\n\nLBDgtime::Vector{Float64}                  # Run time history LBD problem\n\n\nUBDgtime::Vector{Float64}                  # Run time history UBD problem\n\n\nmax_id::Int64                              # Max node used\n\n\npstar::Vector{Interval{Float64}}           # IntervalBox with solution\n\n\nsoln::Vector{Float64}                      # Storage for solution\n\n\nsoln_val::Float64                          # Solution value found\n\n\nfirst_fnd::Bool                            # Has a solution been found\n\n\nfeas_fnd::Bool                             # Has a feasible point been found\n\n\nfirst_num::Int64                           # Iteration at which first solution found\n\n\nlbcnt::Int64                               # number of lower bounding problems solved\n\n\nubcnt::Int64                               # number of upper bounding problems solved\n\n\n\n\nsource\n\n\n#\n\n\nEAGOBranchBound.BnBSolver\n \u2014 \nType\n.\n\n\nBnBSolver\n\n\n\n\nStores solver specific functions used to solve BnB problem. Has the following fields: Lower_Prob::Any        # Stores lower problem function Upper_Prob::Any        # Stores upper problem function Term_Check::Any        # Stores termination check function Branch_Sto::Any        # Stores branching function Node_Select::Any       # Stores node selection function Bisect_Func::Any       # Stores branching function Verbosity::String      # Stores output selection max_iter::Number       # max number of iterations iter_lim::Bool         # determines if iteration limit is checked max_nodes::Int64       # max number of nodes to store in memory BnB_atol::Float64      # absolute tolerance for BnB BnB_rtol::Float64      # relative tolerance for BnB itr_intv::Int64        # number of iterations to skip between printing iteration summary hdr_intv::Int64        # number of iterations to skip between printing header converged::Any         # convergence criterion BnB_digits::Int64      # digits displayed before decimal hist_return::Bool      # returns LBD, UBD array and time vector opt::Any               # optional storage array exhaust::Bool          # exhaustive search: find all solns or find first target_upper::Float64\n\n\nsource\n\n\n\n\nUser Documentation\n\n\n```@contents Pages = [     userdocs/page1.md;     userdocs/page2.md     ] Depth = 2 '''",
            "title": "Introduction"
        },
        {
            "location": "/#eagobranchbound",
            "text": "EAGOBranchBound contains a flexible branch and bound library. This package allows the user to specify termination criteria, lower & upper bounding problems, as well as search criteria.",
            "title": "EAGOBranchBound"
        },
        {
            "location": "/#introduction",
            "text": "More text  #  EAGOBranchBound.BnBModel  \u2014  Type .  BnBModel  Stores attributes of stack used to solve BnB problem. Has the following fields:   Init_Box::Vector{Interval{Float64}}        # stores initial interval box used  box::Vector{Vector{Interval{Float64}}}     # interval box storage stack  Init_Integer::Vector{Vector{Int64}}        # initial integer range  integers::Vector{Vector{Vector{Int64}}}    # integer range storage stack  LBD::Vector{Float64}                       # lower bounds associated with each stack item  UBD::Vector{Float64}                       # Upper bounds associated with each stack item  id::Vector{Int64}                          # Node ID for each stack item  pos::Vector{Int64}                         # Position in BnB Tree for each stack item  LBDg::Float64                              # Global Lower Bound  UBDg::Float64                              # Global Upper Bound  LBDg_hist::Vector{Float64}                 # Value history LBD problem  UBDg_hist::Vector{Float64}                 # Value history UBD problem  LBDgtime::Vector{Float64}                  # Run time history LBD problem  UBDgtime::Vector{Float64}                  # Run time history UBD problem  max_id::Int64                              # Max node used  pstar::Vector{Interval{Float64}}           # IntervalBox with solution  soln::Vector{Float64}                      # Storage for solution  soln_val::Float64                          # Solution value found  first_fnd::Bool                            # Has a solution been found  feas_fnd::Bool                             # Has a feasible point been found  first_num::Int64                           # Iteration at which first solution found  lbcnt::Int64                               # number of lower bounding problems solved  ubcnt::Int64                               # number of upper bounding problems solved   source  #  EAGOBranchBound.BnBSolver  \u2014  Type .  BnBSolver  Stores solver specific functions used to solve BnB problem. Has the following fields: Lower_Prob::Any        # Stores lower problem function Upper_Prob::Any        # Stores upper problem function Term_Check::Any        # Stores termination check function Branch_Sto::Any        # Stores branching function Node_Select::Any       # Stores node selection function Bisect_Func::Any       # Stores branching function Verbosity::String      # Stores output selection max_iter::Number       # max number of iterations iter_lim::Bool         # determines if iteration limit is checked max_nodes::Int64       # max number of nodes to store in memory BnB_atol::Float64      # absolute tolerance for BnB BnB_rtol::Float64      # relative tolerance for BnB itr_intv::Int64        # number of iterations to skip between printing iteration summary hdr_intv::Int64        # number of iterations to skip between printing header converged::Any         # convergence criterion BnB_digits::Int64      # digits displayed before decimal hist_return::Bool      # returns LBD, UBD array and time vector opt::Any               # optional storage array exhaust::Bool          # exhaustive search: find all solns or find first target_upper::Float64  source",
            "title": "Introduction"
        },
        {
            "location": "/#user-documentation",
            "text": "```@contents Pages = [     userdocs/page1.md;     userdocs/page2.md     ] Depth = 2 '''",
            "title": "User Documentation"
        }
    ]
}